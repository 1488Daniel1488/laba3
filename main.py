import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import matplotlib.pyplot as plt

class CurrencyAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ê–Ω–∞–ª–∏–∑ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è")
        self.root.geometry("800x800")

        self.label = tk.Label(root, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç")
        self.label.pack(pady=10)

        self.load_button = tk.Button(root, text="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", command=self.load_file)
        self.load_button.pack(pady=5)

        self.plot_button = tk.Button(root, text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", command=self.plot_graph)
        self.plot_button.pack(pady=5)

        self.analyze_button = tk.Button(root, text="–ê–Ω–∞–ª–∏–∑ –∫—É—Ä—Å–∞", command=self.analyze_rates)
        self.analyze_button.pack(pady=5)

        self.forecast_days_label = tk.Label(root, text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ N –¥–Ω–µ–π:")
        self.forecast_days_label.pack()
        self.forecast_entry = tk.Entry(root)
        self.forecast_entry.insert(0, "5")
        self.forecast_entry.pack(pady=2)

        self.forecast_button = tk.Button(root, text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", command=self.forecast_plot)
        self.forecast_button.pack(pady=5)

        self.text = tk.Text(root, height=20, width=100)
        self.text.pack(padx=10, pady=10)

        self.analysis_output = tk.Text(root, height=10, width=100, bg="#f0f0f0")
        self.analysis_output.pack(padx=10, pady=10)

        self.df = None

    def load_file(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        if not file_path:
            return

        try:
            self.df = pd.read_excel(file_path)
            self.text.delete(1.0, tk.END)
            self.text.insert(tk.END, self.df.head().to_string(index=False))
            self.label.config(text="–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def plot_graph(self):
        if self.df is None:
            messagebox.showwarning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª.")
            return

        try:
            df = self.df.copy()
            df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])

            plt.figure(figsize=(10, 5))
            plt.plot(df['–î–∞—Ç–∞'], df['USD'], label='USD', marker='o')
            plt.plot(df['–î–∞—Ç–∞'], df['EUR'], label='EUR', marker='x')
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel("–ö—É—Ä—Å —Ä—É–±–ª—è")
            plt.title("–ö—É—Ä—Å —Ä—É–±–ª—è –∫ USD –∏ EUR")
            plt.legend()
            plt.grid(True)
            plt.tight_layout()
            plt.show()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫:\n{e}")

    def analyze_rates(self):
        if self.df is None:
            messagebox.showwarning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª.")
            return

        try:
            df = self.df.copy()
            df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
            df['USD_diff'] = df['USD'].diff()
            df['EUR_diff'] = df['EUR'].diff()

            usd_max_drop = df['USD_diff'].idxmax()
            usd_max_rise = df['USD_diff'].idxmin()
            eur_max_drop = df['EUR_diff'].idxmax()
            eur_max_rise = df['EUR_diff'].idxmin()

            result = f"""üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞ —Ä—É–±–ª—è:

üíµ USD:
- üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª—è (–ø–∞–¥–µ–Ω–∏–µ USD): {abs(df.loc[usd_max_rise, 'USD_diff']):.2f} —Ä—É–±. ({df.loc[usd_max_rise, '–î–∞—Ç–∞'].date()})
- üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ä—É–±–ª—è (—Ä–æ—Å—Ç USD): {abs(df.loc[usd_max_drop, 'USD_diff']):.2f} —Ä—É–±. ({df.loc[usd_max_drop, '–î–∞—Ç–∞'].date()})

üí∂ EUR:
- üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª—è (–ø–∞–¥–µ–Ω–∏–µ EUR): {abs(df.loc[eur_max_rise, 'EUR_diff']):.2f} —Ä—É–±. ({df.loc[eur_max_rise, '–î–∞—Ç–∞'].date()})
- üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ä—É–±–ª—è (—Ä–æ—Å—Ç EUR): {abs(df.loc[eur_max_drop, 'EUR_diff']):.2f} —Ä—É–±. ({df.loc[eur_max_drop, '–î–∞—Ç–∞'].date()})
"""
            self.analysis_output.delete(1.0, tk.END)
            self.analysis_output.insert(tk.END, result)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑:\n{e}")

    def forecast_plot(self):
        if self.df is None:
            messagebox.showwarning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª.")
            return

        try:
            N = int(self.forecast_entry.get())
            df = self.df.copy()
            df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])

            usd_forecast = df['USD'].rolling(window=N).mean().dropna()
            eur_forecast = df['EUR'].rolling(window=N).mean().dropna()

            last_date = df['–î–∞—Ç–∞'].iloc[-1]
            forecast_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=N)

            usd_pred = [usd_forecast.iloc[-1]] * N
            eur_pred = [eur_forecast.iloc[-1]] * N

            plt.figure(figsize=(10, 5))
            plt.plot(df['–î–∞—Ç–∞'], df['USD'], label='USD', marker='o')
            plt.plot(df['–î–∞—Ç–∞'], df['EUR'], label='EUR', marker='x')
            plt.plot(forecast_dates, usd_pred, label='USD –ø—Ä–æ–≥–Ω–æ–∑', linestyle='--')
            plt.plot(forecast_dates, eur_pred, label='EUR –ø—Ä–æ–≥–Ω–æ–∑', linestyle='--')

            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel("–ö—É—Ä—Å —Ä—É–±–ª—è")
            plt.title("–ö—É—Ä—Å —Ä—É–±–ª—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º")
            plt.legend()
            plt.grid(True)
            plt.tight_layout()
            plt.show()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑:\n{e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = CurrencyAnalyzerApp(root)
    root.mainloop()
